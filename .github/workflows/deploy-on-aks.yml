# https://docs.microsoft.com/en-us/azure/aks/kubernetes-action
# This is a basic workflow to help you get started with Actions

name: Deploy on AKS

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY_NAME: returngis
  CLUSTER_NAME: returngis
  CLUSTER_RESOURCE_GROUP: AKS-DevOps-Demos
  NAMESPACE: hello-world
  SECRET: hello-secret
  APP_NAME: hello-from-actions

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }} 
          password: ${{ secrets.REGISTRY_PASSWORD }}
      # Container build and push to a Azure Container registry (ACR)
      - run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
    
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
      # Create namespace if doesn't exist
      - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          force: true
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/hello-deployment.yml
            k8s/hello-service.yml
          images: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}